#include "monitor_factory_sk.h"

#include <memory>
#include <stdlib.h>

namespace phxrpc {

MonitorFactory_SK :: MonitorFactory_SK() {
	pthread_rwlock_init( &rwlock_, NULL );
}

MonitorFactory_SK :: ~MonitorFactory_SK() {
	pthread_rwlock_destroy( &rwlock_ );
}

int MonitorFactory_SK :: GetOssIDInConfig( const char * package_name ) {
	return -1;
}

void MonitorFactory_SK :: AddMapping( const char * package_name, int32_t oss_id ) {
	pthread_rwlock_wrlock( &rwlock_ );
	auto itr = package_to_oss_id_.find( package_name );
	if ( itr == package_to_oss_id_.end() ) {
		package_to_oss_id_[package_name] = oss_id;
	}
	pthread_rwlock_unlock( &rwlock_ );
}

int MonitorFactory_SK :: GetOssIDFromCache( const char * package_name ) {
	int oss_id = 0;
	pthread_rwlock_rdlock( &rwlock_ );
	auto itr = package_to_oss_id_.find( package_name );
	if ( itr != package_to_oss_id_.end() ) {
		oss_id = itr->second;
	}
	pthread_rwlock_unlock( &rwlock_ );

	if ( !oss_id ) {
		pthread_rwlock_wrlock( &rwlock_ );
		package_to_oss_id_[package_name] = GetOssIDInConfig( package_name );
		oss_id = package_to_oss_id_[package_name];
		pthread_rwlock_unlock( &rwlock_ );
	}

	return oss_id;
}

std::shared_ptr<ClientMonitor> MonitorFactory_SK :: CreateClientMonitor( const char * package_name ) {
	int ret = GetOssIDFromCache( package_name );
	return std::shared_ptr<ClientMonitor_SK>( new ClientMonitor_SK( ret ) );
}

std::shared_ptr<ServerMonitor> MonitorFactory_SK :: CreateServerMonitor( const char * package_name ) {
	if ( server_monitor_.get() == NULL ) {
		pthread_rwlock_wrlock( &rwlock_ );
		if ( server_monitor_.get() == NULL ) {
			int32_t oss_id = GetOssIDFromCache( package_name );
			server_monitor_ = std::shared_ptr<ServerMonitor_SK>( new ServerMonitor_SK( oss_id ) );
		}
		pthread_rwlock_unlock( &rwlock_ );
	}
	return server_monitor_;
}

}

//gzrd_Lib_CPP_Version_ID--start
#ifndef GZRD_SVN_ATTR
#define GZRD_SVN_ATTR "0"
#endif
static char gzrd_Lib_CPP_Version_ID[] __attribute__((used))="$HeadURL$ $Id$ " GZRD_SVN_ATTR "__file__";
// gzrd_Lib_CPP_Version_ID--end

